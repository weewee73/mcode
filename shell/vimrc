"==========================================
" Author:  wklken
" Version: 6
" Email: wklken@yeah.net
" BlogPost: http://wklken.me
" ReadMe: README.md
" Last_modify: 2013-08-04
" Sections:
"     ->General 基础设置
"     ->Show 展示/排班等界面格式设置
"     ->file encode, 文件编码,格式
"     ->others 其它基础配置
"     ->hot key  自定义快捷键
"     ->bundle 插件管理和配置项
"     ->colortheme 主题,及一些展示上颜色的修改
"==========================================

"==========================================
" General 基础设置
"==========================================

"set guifont=Monaco:h20          " 字体 && 字号

" history存储长度。
set history=2000

"检测文件类型
filetype on
"针对不同的文件类型采用不同的缩进格式
filetype indent on
"允许插件
filetype plugin on
"启动自动补全
filetype plugin indent on

"==========================================
"开启语法高亮
syntax enable
syntax on
"let g:molokai_original = 1
"set background=light
"set background=dark
"set t_Co=256

set tags=tags;

"非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
set autoread          " 文件修改之后自动载入。
set shortmess=atI       " 启动的时候不显示那个援助索马里儿童的提示

" Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert mode
set backspace=indent,eol,start


set viminfo+=!
"To turn on the automatic persistence of marks across Vim sessions
let g:mwAutoSaveMarks = 1
"To enable the automatic restore of marks from a previous Vim session
let g:mwAutoLoadMarks = 1

" 备份,到另一个位置. 防止误删, 目前是取消备份
"set backup
"set backupext=.bak
"set backupdir=~/bak/vimbk/

" 取消备份。 视情况自己改
set nobackup
set noswapfile

" 突出显示当前行等 不喜欢这种定位可注解
"set cursorcolumn
"set cursorline              " 突出显示当前行

"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=


"- 则点击光标不会换,用于复制
set mouse-=a           " 鼠标暂不启用, 键盘党....
" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
"set selection=exclusive
set selection=inclusive
set selectmode=mouse,key

" No annoying sound on errors
" 去掉输入错误的提示声音
set title                " change the terminal's title
set novisualbell           " don't beep
set noerrorbells         " don't beep
set t_vb=
set tm=500

"==========================================
" Show 展示/排班等界面格式设置
"==========================================

"显示行号：
set number
set nowrap                    " 取消换行。

"括号配对情况
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch
" 搜索时忽略大小写
set ignorecase
" 随着键入即时搜索
set incsearch
" 有一个或以上大写字母时仍大小写敏感
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise

" 代码折叠
"set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
"set foldmethod=indent
"set foldlevel=99

"Smart indent
set smartindent
set autoindent    " always set autoindenting on
" never add copyindent, case error   " copy the previous indentation on autoindenting

set tabstop=4                " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=4  " number of spaces to use for autoindenting
set softtabstop=4             " 按退格键时可以一次删掉 4 个空格
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格

set expandtab                " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'

" A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast

set wildignore=*.swp,*.bak,*.pyc,*.class

"显示当前的行号列号：
set ruler
""在状态栏显示正在输入的命令
set showcmd
" Show current mode
set showmode

" Set 7 lines to the cursor - when moving vertically using j/k 上下滚动,始终在中间
set scrolloff=7

"set winwidth=79

" 命令行（在状态行下）的高度，默认为1，这里是2
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line
set laststatus=2

"==========================================
" file encode, 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,big5,gb18030,euc-jp,euc-kr,latin1
"set helplang=cn
"language message zh_CN.UTF-8
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B

"==========================================
" others 其它配置
"==========================================
autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。

" 自动补全配置
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"set completeopt+=longest
set completeopt=longest,menu

"set tw=20

if has("cscope")
"    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out .
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif
"    set cst

set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <F3> :cs find e <C-R>=expand("<cword>")<CR><CR>  
nmap <F4> :cs find c <C-R>=expand("<cword>")<CR><CR>  
nmap <F9> :cnext<CR>
nmap <F10> :cprev<CR>
nmap <F5> :tnext<CR>
nmap <F6> :tprev<CR>
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>  
"

nnoremap <silent> <F8> :TlistToggle<CR>
nmap <silent> <leader>fe :Vexplore!<cr>
nnoremap <silent> <F12> :call SearchWord()<CR>
"nnoremap <silent> <F12> :call Mydict()<CR>
nnoremap <silent> qq :q<CR>



au BufNewFile,BufRead *.cflow setf cflow
au BufRead,BufNewFile *.txt setlocal ft=txt
au BufRead,BufNewFile *.log setlocal ft=txt


"==========================================
"" taglist
"==========================================
let Tlist_Show_One_File=1    "只显示当前文件的tags
let Tlist_WinWidth=40        "设置taglist宽度
let Tlist_Exit_OnlyWindow=1  "tagList窗口是最后一个窗口，则退出Vim
"let Tlist_Use_Right_Window=1 "在Vim窗口右侧显示taglist窗口
"let Tlist_Auto_Open = 1


"==========================================
" netrw setting
"==========================================
let g:netrw_winsize = 30
let g:netrw_browse_split = 3


iabbrev #b /****************************************
iabbrev #e <Space>****************************************/

"When on, splitting a window will put the new window right of the current one.
set splitright 

" look up current word under cursor
function! SearchWord()
    let expr = '!sdcv -n -u "朗道英汉字典5.0" ' .expand("<cword>")
    exec expr
endfunction

"nnoremap <Leader>d :call SearchWord()<CR>
"vnoremap <Leader>d :<C-U>call SearchWord_v(visualmode(), 1)<cr>


function! Mydict()
    "执行sdcv命令查询单词的含义,返回的值保存在expl变量中
    let expl=system('sdcv -n ' . expand("<cword>"))
    "在每个窗口中执行命令，判断窗口中的文件名是否是dict-tmp，如果是，强制关闭
    windo if expand("%")=="dict-tmp" |q!|endif  
    "纵向分割窗口，宽度为25，新窗口的内容为dict-tmp文件的内容
    25vsp dict-tmp
    "设置查询结果窗口的属性，不缓存，不保留交换文件
    setlocal buftype=nofile bufhidden=hide noswapfile
    "将expl的内容显示到查询结果窗口
    1s/^/\=expl/
    "跳转回文本窗口
    wincmd p
endfunction
