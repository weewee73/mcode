   set nocompatible              " be iMproved, required
   filetype off                  " required

   " set the runtime path to include Vundle and initialize
   set rtp+=~/.vim/bundle/Vundle.vim
   call vundle#begin()
   " alternatively, pass a path where Vundle should install plugins
   "call vundle#begin('~/some/path/here')

   " let Vundle manage Vundle, required
   Plugin 'gmarik/Vundle.vim'

"   " The following are examples of different formats supported.
"   " Keep Plugin commands between vundle#begin/end.
"   " plugin on GitHub repo
"   Plugin 'tpope/vim-fugitive'
"   " plugin from http://vim-scripts.org/vim/scripts.html
"   Plugin 'L9'
"   " plugin not on GitHub
"   Plugin 'git://git.wincent.com/command-t.git'
"   " git repos on your local machine (i.e. when working on your own plugin)
"   Plugin 'file:///home/gmarik/path/to/plugin'
"   " The sparkup vim script is in a subdirectory of this repo called vim.
"   " Pass the path to set the runtimepath properly.
"   Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"   " Avoid a name conflict with L9
"   Plugin 'user/L9', {'name': 'newL9'}
"
   " All of your Plugins must be added before the following line


" my scripts
"" scripts from http://vim-scripts.org/vim/scripts.html
Plugin 'The-NERD-tree'
Plugin 'taglist.vim'
Plugin 'c.vim'
Plugin 'a.vim'
Plugin 'Mark--Karkat'
Plugin 'TxtBrowser'
Plugin 'vis'
"" scripts on GitHub repos https://github.com/
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'Lokaltog/vim-powerline'
Plugin 'gregsexton/gitv'
Plugin 'tpope/vim-fugitive'
"Plugin 'ervandew/supertab'
Plugin 'dkprice/vim-easygrep'
Plugin 'Valloric/YouCompleteMe'
Plugin 'kien/ctrlp.vim'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'tpope/vim-surround'
Plugin 'kshenoy/vim-signature' "vim-signature is a plugin to place, toggle and display marks.
Plugin 'terryma/vim-multiple-cursors'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'Townk/vim-autoclose'
Plugin 'bling/vim-airline'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'suan/vim-instant-markdown'
"Plugin 'tomasr/molokai'
" plugin not on GitHub
Plugin 'git://repo.or.cz/vcscommand.git'


   call vundle#end()            " required
   filetype plugin indent on    " required
   " To ignore plugin indent changes, instead use:
   "filetype plugin on
   "
   " Brief help
   " :PluginList          - list configured plugins
   " :PluginInstall(!)    - install (update) plugins
   " :PluginSearch(!) foo - search (or refresh cache first) for foo
   " :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
   "
   " see :h vundle for more details or wiki for FAQ
   " Put your non-Plugin stuff after this line



"==========================================
" General
"==========================================
set number
highlight LineNr  ctermbg=255 ctermfg=8

set hlsearch
set ignorecase

syntax enable
"syntax on
set regexpengine=1

set clipboard=unnamedplus

set background=light
set t_Co=256

"t_te	out of termcap mode
"t_ti	put terminal in termcap mode
set t_ti= t_te=

""When on, splitting a window will put the new window right of the current one.
set splitright


set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,big5,gb18030,euc-jp,euc-kr,latin1

set tabstop=4       " Number of spaces that a <Tab> in the file counts for.
set shiftwidth=4    " number of spaces to use for autoindenting
set softtabstop=4   " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.
set smarttab        " When on, a <Tab> in front of a line inserts blanks according to 'shiftwidth'.
set expandtab       " In Insert mode: Use the appropriate number of spaces to insert a <Tab>.

set backspace=indent,eol,start  " Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert mode

" always set autoindenting and smart on
set autoindent
set smartindent

" Always show the status line
set laststatus=2
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P

" find files
set path+=./include

"" custom comma motion mapping
nmap di, f,dT,
nmap ci, f,cT,
nmap da, f,ld2F,i,<ESC>l
nmap ca, f,ld2F,i,<ESC>a
""" delete surrounding characters
"noremap <leader>d" F"x,x
"noremap <leader>c" F"x,xi
"noremap <leader>d' F'x,x
"noremap <leader>c' F'x,xi
"noremap <leader>d( F(xf)x
"noremap <leader>c( F(xf)xi
"noremap <leader>d) F(xf)x
"noremap <leader>c) F(xf)xi
"noremap <leader>d{ F{xf}x
"noremap <leader>d} F{xf}x
"noremap <leader>c{ F{xf}xi
"noremap <leader>c} F{xf}xi
"noremap <leader>d[ F[xf]x
"noremap <leader>d] F[xf]x
"noremap <leader>c[ F[xf]xi
"noremap <leader>c] F[xf]xi
"" quick pairs
"imap <leader>' ''<ESC>i
"imap <leader>" ""<ESC>i
"imap <leader>( ()<ESC>i
"imap <leader>[ []<ESC>i
" auto-center
"nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz
nnoremap ]] ]]zz
nnoremap [[ [[zz
"nnoremap ]] j]]kzzf(b
"nnoremap [[  [[kzzf(b
" indent
vnoremap > >gv
vnoremap < <gv


set tags=tags;
set cst
if has("cscope")
"    set csprg=/usr/bin/cscope
    set csto=0
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out .
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif
set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <F2> :cprev<CR>
nmap <F3> :cnext<CR>
nmap <F4> :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <F5> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <F6> :tprev<CR>
nmap <F7> :tnext<CR>
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
"nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>  
"


"nnoremap <silent> <Leader>ff :execute "vimgrep /".expand("<cword>")."/"expand("%") <Bar> cw<CR>
nnoremap <silent> <Leader>ff  :vimgrep /<C-R>=expand("<cword>")<CR>/ % \| cw<CR>
vnoremap <silent> <Leader>ff y:vimgrep /<C-R>=substitute(escape(@", '.*\\/[]'), "\n", '\\n', 'g')<CR>/ % \| cw<CR>

nnoremap <silent> <Leader>ft  :let @a="" \| g/<C-R>=expand("<cword>")<CR>/y A<CR><C-O>:tabnew<CR>P
vnoremap <silent> <Leader>ft y:let @a="" \| g/<C-R>=substitute(escape(@", '.*\\/[]'), "\n", '\\n', 'g')<CR>/y A<CR><C-O>:tabnew<CR>P

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif


set completeopt-=preview


"==========================================
" TxtBrowser
"==========================================
au BufRead,BufNewFile *.txt setlocal ft=txt

"==========================================
" taglist.vim
"==========================================
let Tlist_Show_One_File=1
let Tlist_WinWidth=40
let Tlist_Exit_OnlyWindow=1
"let Tlist_Use_Right_Window=1
let Tlist_Auto_Open=1
nnoremap <silent> <F8> :TlistToggle<CR>

"==========================================
" Lokaltog/vim-easymotion
"==========================================
"map <Leader> <Plug>(easymotion-prefix)
map s <Plug>(easymotion-s)

"==========================================
" Lokaltog/vim-easymotion
"==========================================
"let g:Powerline_symbols = 'fancy'

"==========================================
" The-NERD-tree
"==========================================
let NERDTreeWinPos="right"
nnoremap <silent> <F10> :NERDTreeToggle<CR>

"==========================================
" fholgado/minibufexpl.vim
"==========================================
let g:miniBufExplorerAutoStart = 0

"==========================================
" ervandew/supertab
"==========================================
"let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabDefaultCompletionType = "context"

"==========================================
" Valloric/YouCompleteMe
"==========================================
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_invoke_completion = '<leader><Space>'
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '.ycm_extra_conf.py'
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
"let g:ycm_semantic_triggers =  {
"    \   'c' : ['->', '.'],
"    \   'objc' : ['->', '.'],
"    \   'ocaml' : ['.', '#'],
"    \   'cpp,objcpp' : ['->', '.', '::'],
"    \   'perl' : ['->'],
"    \   'php' : ['->', '::'],
"    \   'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
"    \   'ruby' : ['.', '::'],
"    \   'lua' : ['.', ':'],
"    \   'erlang' : [':'],
"    \ }
"
"

"==========================================
" a.vim
"==========================================
let g:alternateNoDefaultAlternate = 1
let g:alternateSearchPath = 'sfr:./include,sfr:../source,sfr:../src,sfr:../include,sfr:../inc'


"==========================================
" dkprice/vim-easygrep
"==========================================
let g:EasyGrepCommand=1
let g:EasyGrepFilesToExclude=".svn,.git,tags,cscope.*,*.o,*.swp,*.out,c.vim"
let g:EasyGrepJumpToMatch=0

"==========================================
" kshenoy/vim-signature
"==========================================
let g:SignatureMap = {
      \ 'PlaceNextMark'      :  "m",
      \ 'PurgeMarksAtLine'   :  "<Space>",
      \ 'PurgeMarks'         :  "-",
      \ }

"==========================================
" bling/vim-airline
"==========================================
"let g:airline_theme='badwolf'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '▶'
let g:airline_left_sep = ''
let g:airline_right_sep = '◀'
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.branch = 'ץ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline_section_z='%3p%% %{g:airline_symbols.linenr}%#__accent_bold#%4l%#__restore__#:%-3c'

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#right_sep = ''



"==========================================
" godlygeek/tabular
"==========================================
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

inoremap <silent> <Bar> <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunction

"==========================================
" plasticboy/vim-markdown
"==========================================
autocmd BufNewFile,BufReadPost *.md set filetype=markdown


"==========================================
" suan/vim-instant-markdown
"==========================================
let g:instant_markdown_autostart = 0
let g:vim_markdown_initial_foldlevel=1



" look up current word under cursor
function! SearchWord()
    let expr = '!sdcv -n -u "朗道英汉字典5.0" ' .expand("<cword>")
    exec expr
endfunction
nnoremap <silent> <F12> :call SearchWord()<CR>

"nnoremap <Leader>d :call SearchWord()<CR>
"vnoremap <Leader>d :<C-U>call SearchWord_v(visualmode(), 1)<cr>

"
"function! Mydict()
"    "执行sdcv命令查询单词的含义,返回的值保存在expl变量中
"    let expl=system('sdcv -n ' . expand("<cword>"))
"    "在每个窗口中执行命令，判断窗口中的文件名是否是dict-tmp，如果是，强制关闭
"    windo if expand("%")=="dict-tmp" |q!|endif
"    "纵向分割窗口，宽度为25，新窗口的内容为dict-tmp文件的内容
"    25vsp dict-tmp
"    "设置查询结果窗口的属性，不缓存，不保留交换文件
"    setlocal buftype=nofile bufhidden=hide noswapfile
"    "将expl的内容显示到查询结果窗口
"    1s/^/\=expl/
"    "跳转回文本窗口
"    wincmd p
"endfunction
""nnoremap <silent> <F12> :call Mydict()<CR>

function! Synchronize()
    exec ':silent !$HOME/github/mcode/shell/project_init.sh'

    "exec ':silent cs reset'
    exec ':silent cs kill -1'
    exec ':silent cs add cscope.out .'

    exec ':silent TlistUpdate'
    "exec ':redraw!' "ctrl-l

    " be careful only use in c/c++ file !
    exec 'set tags+=/usr/local/include/showclear/tags'
    exec ':silent set ft=c'

endfunction
command Sync call Synchronize()

function! AddSpace()
    " be careful only use in c/c++ file !
    
    " add space after ','
    exec '%s/,\(\S\)/, \1/ge'

    " add space after C control keyword
    exec '%s/\(if\|while\|for\|switch\)(/\1 (/ge'


    " add space after '='
    exec '%s/=\([^ \t=]\)/= \1/ge'
    " add space before '=',  be careful '>>=' and '<<=' !
    exec '%s/\([^ \t=><!+\-*/%|&^]\)=/\1 =/ge'
    " add space before '?=', be careful '>>=' and '<<=' !
    exec '%s/\([^ \t]\)\([=><!+\-*/%|&^]=\)/\1 \2/ge'

    " add space before and after '&&, ||'
    exec '%s/\(\S\)\(&&\|||\)/\1 \2/ge'
    exec '%s/\(&&\|||\)\(\S\)/\1 \2/ge'

    " add space before and after '<', be careful '#include <xx>'
    exec '%s/\([^ \t]\)</\1 </ge'
    exec '%s/<\([^ \t=<]\)/< \1/ge'

    " add space before and after '>', be careful '#include <xx>'
    exec '%s/\([^ \t\-]\)>/\1 >/ge'
    exec '%s/\([^-]\)>\([^ \t=>]\)/\1> \2/ge'

    " add space before and after '+,-,*,/,%,....'
    " ......
endfunction
command AddSpace call AddSpace()

function! DeleteTailBlank()
    exec '%s/[ \t]\+$//ge'
endfunction
command DeleteTailBlank call DeleteTailBlank()

function! ExpandTab()
    exec '%s/\t/    /ge'
endfunction
command ExpandTab call ExpandTab()

function! FormatCFile()
    exec '%s///ge'
    normal ggVG=
    call DeleteTailBlank()
    call ExpandTab()
    call AddSpace()
endfunction
command FormatCFile call FormatCFile()



function! Mlog(name)
    let file_name = '$HOME/github/mcode/journal/' . a:name
    exec ':tabnew ' . file_name
endfunction
command Mvim call Mlog("vim.log")
command Mnote call Mlog("note.log")
command Mshell call Mlog("shell.log")







"" Search for current word and replace with given text for files in arglist.
"function! Replace(bang, search, replace)
"    let flag = 'geI'
"    if !a:bang
"        let flag .= 'c'
"    endif
"    "let search = '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
"    let search =  escape(a:search,  '/\&~')
"    let replace = escape(a:replace, '/\&~')
"    let exclued = '*.o,cscope.*,tags,*.swp'
"    "execute 'arg **/*.[ch]'
"    execute 'set wildignore+=' . exclued
"    execute 'arg **/*'
"    execute 'set wildignore-=' . exclued
"    execute 'argdo %s/' . search . '/' . replace . '/' . flag . ' | update'
"endfunction
""command! -nargs=1 -bang Replace :call Replace(<bang>0, <q-args>)
"nnoremap <Leader>R :call Replace(0, expand('<cword>'), input('Replace '.expand('<cword>').' with: '))<CR>
"command! -nargs=* -bang Replace :call Replace(<bang>0, <f-args>)
"command! -nargs=1 FindAll :set wildignore+=*.o,cscope.*,tags,*.swp | vimgrep <q-args> **/* | set wildignore-=*.o,cscope.*,tags,*.swp | cw















" END==============================================================================================================================





"
""set guifont=Monaco:h20          " 字体 && 字号
"
"" history存储长度。
"set history=2000
"
""检测文件类型
"filetype on
""针对不同的文件类型采用不同的缩进格式
"filetype indent on
""允许插件
"filetype plugin on
""启动自动补全
"filetype plugin indent on
"
""==========================================
""开启语法高亮
""let g:molokai_original = 1
"set background=dark
"
"
""非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
"set nocompatible
"set autoread          " 文件修改之后自动载入。
"set shortmess=atI       " 启动的时候不显示那个援助索马里儿童的提示
"
"
"" MarkSave color
"set viminfo+=!
""To turn on the automatic persistence of marks across Vim sessions
"let g:mwAutoSaveMarks = 1
""To enable the automatic restore of marks from a previous Vim session
"let g:mwAutoLoadMarks = 1
"
"" 备份,到另一个位置. 防止误删, 目前是取消备份
""set backup
""set backupext=.bak
""set backupdir=~/bak/vimbk/
"
"" 取消备份
"set nobackup
"set noswapfile
"
"" 突出显示当前行等 不喜欢这种定位可注解
""set cursorcolumn
"set cursorline              " 突出显示当前行
"hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
""hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
""nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
"
""设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
""好处：误删什么的，如果以前屏幕打开，可以找回
"set t_ti= t_te=
"
"
""- 则点击光标不会换,用于复制
"set mouse-=a           " 鼠标暂不启用, 键盘党....
"set mouse=a           " 鼠标暂不启用, 键盘党....
"" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
""set selection=exclusive
"set selection=inclusive
"set selectmode=mouse,key
"set clipboard=unnamedplus
"
"" No annoying sound on errors
"" 去掉输入错误的提示声音
"set title                " change the terminal's title
"set novisualbell           " don't beep
"set noerrorbells         " don't beep
"set t_vb=
"set tm=500
"
""==========================================
"" Show 展示/排班等界面格式设置
""==========================================
"
"set nowrap                    " 取消换行。
"
""括号配对情况
"set showmatch
"" How many tenths of a second to blink when matching brackets
"set mat=2
"
"" 随着键入即时搜索
"set incsearch
"" 有一个或以上大写字母时仍大小写敏感
"set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
"
"" 代码折叠
""set foldenable
"" 折叠方法
"" manual    手工折叠
"" indent    使用缩进表示折叠
"" expr      使用表达式定义折叠
"" syntax    使用语法定义折叠
"" diff      对没有更改的文本进行折叠
"" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
""set foldmethod=indent
""set foldlevel=99
"
"" never add copyindent, case error   " copy the previous indentation on autoindenting
"

"set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
"
"" A buffer becomes hidden when it is abandoned
"set hidden
"set wildmode=list:longest
"set ttyfast
"
"set wildignore=*.swp,*.bak,*.pyc,*.class
"
""显示当前的行号列号：
"set ruler
"""在状态栏显示正在输入的命令
"set showcmd
"" Show current mode
"set showmode
"
"" Set 7 lines to the cursor - when moving vertically using j/k 上下滚动,始终在中间
"set scrolloff=7
"
""set winwidth=79
"
"" 命令行（在状态行下）的高度，默认为1，这里是2
"
""==========================================
"" file encode, 文件编码,格式
""==========================================
"" 设置新文件的编码为 UTF-8
"set encoding=utf-8
"" 自动判断编码时，依次尝试以下编码：
""set helplang=cn
""language message zh_CN.UTF-8
""set langmenu=zh_CN.UTF-8
""set enc=2byte-gb18030
"" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
"set termencoding=utf-8
""set termencoding=cp936
"
"" Use Unix as the standard file type
"set ffs=unix,dos,mac
"
"" 如遇Unicode值大于255的文本，不必等到空格再折行。
"set formatoptions+=m
"" 合并两行中文时，不在中间加空格：
"set formatoptions+=B
"
""==========================================
"" others 其它配置
""==========================================
"autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
"autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。
"
"" 自动补全配置
""让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
""set completeopt+=longest
"set completeopt=longest,menu
"
""set tw=20
"
"
"nnoremap <silent> qq :q!<CR>
"
"
"
"au BufNewFile,BufRead *.cflow setf cflow
"
"

"
"
"iabbrev #b /****************************************
"iabbrev #e <Space>****************************************/
